[
    {
      "id": 1,
      "question": "What is JavaScript?",
      "answer": "JavaScript is a high-level, interpreted programming language used to create dynamic and interactive effects on websites."
    },
    {
      "id": 2,
      "question": "What is the difference between var, let, and const?",
      "answer": "var is function-scoped, let and const are block-scoped; const is used for variables that should not be reassigned."
    },
    {
      "id": 3,
      "question": "What are arrow functions?",
      "answer": "Arrow functions are a shorthand for defining functions using => and they do not bind their own this."
    },
    {
      "id": 4,
      "question": "What is the DOM?",
      "answer": "The Document Object Model (DOM) is a tree structure representation of HTML that JavaScript can manipulate."
    },
    {
      "id": 5,
      "question": "What is event bubbling?",
      "answer": "Event bubbling is when an event propagates from the innermost element outward to its parents."
    },
    {
      "id": 6,
      "question": "What is a closure?",
      "answer": "A closure is a function that retains access to its lexical scope even when executed outside that scope."
    },
    {
      "id": 7,
      "question": "What is hoisting?",
      "answer": "Hoisting is JavaScript's behavior of moving declarations to the top of the current scope."
    },
    {
      "id": 8,
      "question": "What are Promises?",
      "answer": "Promises are objects that represent the eventual completion or failure of an asynchronous operation."
    },
    {
      "id": 9,
      "question": "What is async/await?",
      "answer": "async/await is syntactic sugar over Promises that allows writing asynchronous code in a synchronous style."
    },
    {
      "id": 10,
      "question": "What is the difference between == and ===?",
      "answer": "== compares values with type coercion, === compares values without type coercion (strict equality)."
    },
    {
      "id": 11,
      "question": "What is NaN?",
      "answer": "NaN stands for 'Not-a-Number' and is returned when a numeric operation fails."
    },
    {
      "id": 12,
      "question": "What is typeof in JavaScript?",
      "answer": "typeof is an operator that returns the type of a variable as a string."
    },
    {
      "id": 13,
      "question": "What is the difference between null and undefined?",
      "answer": "null is an intentional absence of value, while undefined means a variable has been declared but not assigned a value."
    },
    {
      "id": 14,
      "question": "How do you create an object?",
      "answer": "You can create an object using object literal syntax: const obj = { key: 'value' }."
    },
    {
      "id": 15,
      "question": "What are template literals?",
      "answer": "Template literals are strings wrapped in backticks (`) that can include expressions using ${expression}."
    },
    {
      "id": 16,
      "question": "What is the spread operator?",
      "answer": "The spread operator (...) allows an iterable to be expanded in places where multiple elements or arguments are expected."
    },
    {
      "id": 17,
      "question": "What is destructuring?",
      "answer": "Destructuring is a syntax for extracting values from arrays or objects into distinct variables."
    },
    {
      "id": 18,
      "question": "What is a callback function?",
      "answer": "A callback is a function passed into another function as an argument, which is then executed inside the outer function."
    },
    {
      "id": 19,
      "question": "What is a higher-order function?",
      "answer": "A higher-order function is a function that takes another function as an argument or returns a function."
    },
    {
      "id": 20,
      "question": "What is a pure function?",
      "answer": "A pure function always returns the same result for the same input and does not cause side effects."
    }
  ]
  